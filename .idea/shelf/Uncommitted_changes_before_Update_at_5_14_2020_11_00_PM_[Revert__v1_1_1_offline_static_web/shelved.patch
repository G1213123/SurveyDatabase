Index: web_interface/surveydb/surveydb/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nDjango settings for surveydb project.\r\n\r\nGenerated by 'django-admin startproject' using Django 3.0.5.\r\n\r\nFor more information on this file, see\r\nhttps://docs.djangoproject.com/en/3.0/topics/settings/\r\n\r\nFor the full list of settings and their values, see\r\nhttps://docs.djangoproject.com/en/3.0/ref/settings/\r\n\"\"\"\r\n\r\nimport os\r\n\r\n\r\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\r\nfrom django.conf.global_settings import STATICFILES_DIRS\r\n\r\nBASE_DIR = os.path.dirname( os.path.dirname( os.path.abspath( __file__ ) ) )\r\n\r\n# Quick-start development settings - unsuitable for production\r\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = '2avjf+ljy4c-+07e^jq2(bdk93$r(k5+x-t3y_scb3i#w-mljg'\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\nDEBUG = True\r\n\r\nALLOWED_HOSTS = ['*']\r\n\r\nif os.name == 'nt':\r\n    import platform\r\n\r\n    OSGEO4W = r\"C:\\OSGeo4W\"\r\n    if '64' in platform.architecture()[0]:\r\n        OSGEO4W += \"64\"\r\n    assert os.path.isdir( OSGEO4W ), \"Directory does not exist: \" + OSGEO4W\r\n    os.environ['OSGEO4W_ROOT'] = OSGEO4W\r\n    os.environ['GDAL_DATA'] = OSGEO4W + r\"\\share\\gdal\"\r\n    os.environ['PROJ_LIB'] = OSGEO4W + r\"\\share\\proj\"\r\n    os.environ['PATH'] = OSGEO4W + r\"\\bin;\" + os.environ['PATH']\r\n\r\nGDAL_LIBRARY_PATH = r'C:\\OSGeo4W64\\bin\\gdal300'\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'bokehMap.apps.BokehmapConfig',\r\n    'django.contrib.gis',\r\n    'rest_framework',\r\n    'rest_framework_gis',\r\n    'django_filters',\r\n    'leaflet',\r\n    'multiselectfield',\r\n    'mapwidgets',\r\n    ]\r\n\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    'django.middleware.csrf.CsrfViewMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n]\r\n\r\nROOT_URLCONF = 'surveydb.urls'\r\n\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [os.path.join(BASE_DIR,'templates')],\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nWSGI_APPLICATION = 'surveydb.wsgi.application'\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\r\n\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.contrib.gis.db.backends.spatialite',\r\n        'NAME': os.path.join( BASE_DIR, 'db.sqlite3' ),\r\n    }\r\n}\r\n\r\n# Password validation\r\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\r\n\r\nAUTH_PASSWORD_VALIDATORS = [\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\r\n    },\r\n]\r\n\r\n# Internationalization\r\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\r\n\r\nLANGUAGE_CODE = 'en-us'\r\n\r\nTIME_ZONE = 'UTC'\r\n\r\nUSE_I18N = True\r\n\r\nUSE_L10N = True\r\n\r\nUSE_TZ = True\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\r\n\r\nSTATIC_URL = '/static/'\r\n\r\nSTATICFILES_DIRS = [\r\n    os.path.join(BASE_DIR, 'static'),\r\n]\r\n\r\nLEAFLET_CONFIG = {\r\n  'DEFAULT_CENTER': (22.375,114.126),\r\n  'DEFAULT_ZOOM': 11,\r\n  'MIN_ZOOM': 1,\r\n  'MAX_ZOOM': 20,\r\n    'TILES': ''\r\n}\r\n\r\nMAP_WIDGETS = {\r\n    \"GooglePointFieldWidget\": (\r\n        (\"zoom\", 11),\r\n        (\"mapCenterLocation\", [22.315,114.176]),\r\n        (\"markerFitZoom\", 11),\r\n        (\"MINIFED\", False)\r\n    ),\r\n    \"GOOGLE_MAP_API_KEY\": 'AIzaSyB1ahSJjh6TtRwXmLOCTJ6eDY_dchw5v4s',\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web_interface/surveydb/surveydb/settings.py	(revision 96589884523ce3cb8a02b91b27f7055e11a75a16)
+++ web_interface/surveydb/surveydb/settings.py	(date 1589213577669)
@@ -100,6 +100,14 @@
         'NAME': os.path.join( BASE_DIR, 'db.sqlite3' ),
     }
 }
+""" 
+'ENGINE': 'django.contrib.gis.db.backends.postgis',
+'NAME': 'gis',
+'USER': 'user001',
+'PASSWORD': '',
+'HOST': 'localhost',
+'PORT': '5432'
+"""
 
 # Password validation
 # https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators
@@ -149,12 +157,13 @@
     'TILES': ''
 }
 
+GOOGLE_MAP_API_KEY = 'AIzaSyB1ahSJjh6TtRwXmLOCTJ6eDY_dchw5v4s'
 MAP_WIDGETS = {
     "GooglePointFieldWidget": (
-        ("zoom", 11),
-        ("mapCenterLocation", [22.315,114.176]),
+        ("zoom", 15),
+        ("mapCenterLocation", [22.375,114.126]),
         ("markerFitZoom", 11),
-        ("MINIFED", False)
+        ("GooglePlaceAutocompleteOptions", {'componentRestrictions': {'country': 'uk'}})
     ),
-    "GOOGLE_MAP_API_KEY": 'AIzaSyB1ahSJjh6TtRwXmLOCTJ6eDY_dchw5v4s',
+    "GOOGLE_MAP_API_KEY": GOOGLE_MAP_API_KEY,
 }
Index: web_interface/surveydb/bokehMap/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib import admin\r\nfrom django.http import HttpResponseRedirect\r\n# Register your models here.\r\n\r\nfrom django.contrib.gis.admin import GeoModelAdmin\r\nfrom django.contrib.gis.admin import OSMGeoAdmin\r\nfrom django.contrib.gis.forms.widgets import OSMWidget\r\nfrom leaflet.admin import LeafletGeoAdmin\r\nfrom django.contrib.gis.geos import Point\r\nfrom leaflet.forms.widgets import LeafletWidget\r\nfrom mapwidgets.widgets import GooglePointFieldWidget\r\nfrom django.shortcuts import redirect\r\nfrom .models import Survey, Time, Location\r\nfrom django.contrib.admin.widgets import AdminTimeWidget\r\nfrom django.contrib.gis.db import models\r\nfrom django.contrib.gis import forms\r\nfrom . import SelectTimeWidget\r\nfrom django.forms import Textarea\r\nimport os\r\n\r\n\r\n@admin.register( Survey )\r\nclass SurveyAdmin( admin.ModelAdmin ):\r\n    list_display = [x.name for x in Survey._meta.fields]\r\n    ordering = ('SurveyID',)\r\n    formfield_overrides = {\r\n        models.TextField: {'widget': Textarea(\r\n            attrs={'rows': 1,\r\n                   'cols': 40,\r\n                   'style': 'height: 8em;'} )},\r\n    }\r\n\r\n    # redirect(r'/admin/bokehMap/survey/add/')\r\n    def response_add(self, request, obj, post_url_continue=\"../%s/\"):\r\n        if '_continue' in request.POST:\r\n            return HttpResponseRedirect( f'/admin/bokehMap/time/add?SurveyID={obj.pk}' )\r\n        else:\r\n            return HttpResponseRedirect( '/admin/bokehMap/survey/add' )\r\n\r\n\r\nLEAFLET_WIDGET_ATTRS = {\r\n    'map_height': '500px',\r\n    'map_width': '100%',\r\n}\r\n\r\nLEAFLET_FIELD_OPTIONS = {'widget': LeafletWidget( attrs=LEAFLET_WIDGET_ATTRS )}\r\n\r\nFORMFIELD_OVERRIDES = {\r\n    models.PointField: LEAFLET_FIELD_OPTIONS,\r\n    models.MultiPointField: LEAFLET_FIELD_OPTIONS,\r\n    models.LineStringField: LEAFLET_FIELD_OPTIONS,\r\n    models.MultiLineStringField: LEAFLET_FIELD_OPTIONS,\r\n    models.PolygonField: LEAFLET_FIELD_OPTIONS,\r\n    models.MultiPolygonField: LEAFLET_FIELD_OPTIONS,\r\n}\r\n\r\n\r\nclass FixedGooglePointFieldWidget( GooglePointFieldWidget ):\r\n    def render(self, name, value, attrs=None, renderer=None):\r\n        if isinstance( value, Point ):\r\n            x = value.x\r\n            value.x = value.y\r\n            value.y = x\r\n        return super( FixedGooglePointFieldWidget, self ).render( name, value, attrs, renderer )\r\n\r\n\r\nfrom mapwidgets.settings import MapWidgetSettings, mw_settings\r\n\r\n\r\ndef minify_if_not_debug(asset):\r\n    \"\"\"\r\n        Transform template string `asset` by inserting '.min' if DEBUG=False\r\n    \"\"\"\r\n    return asset.format( \"\" if not mw_settings.MINIFED else \".min\" )\r\n\r\n\r\nclass FixedGoogleMultiPointFieldWidget( GooglePointFieldWidget ):\r\n\r\n    @property\r\n    def media(self):\r\n        css = {\r\n            \"all\": [\r\n                minify_if_not_debug( \"mapwidgets/css/map_widgets{}.css\" ),\r\n            ]\r\n        }\r\n\r\n        js = [\r\n            \"https://maps.googleapis.com/maps/api/js?libraries=places&language={}&key={}\".format(\r\n                mw_settings.LANGUAGE, mw_settings.GOOGLE_MAP_API_KEY\r\n            )\r\n        ]\r\n\r\n        if not mw_settings.MINIFED:  # pragma: no cover\r\n            js = js + [\r\n                \"mapwidgets/js/jquery_init.js\",\r\n                \"mapwidgets/js/jquery_class.js\",\r\n                \"mapwidgets/js/django_mw_base.js\",\r\n                \"js/mw_google_multipoint_field.js\",\r\n            ]\r\n        else:\r\n            js = js + [\r\n                \"mapwidgets/js/mw_google_point_field.min.js\"\r\n            ]\r\n\r\n        return forms.Media( js=js, css=css )\r\n\r\n    def render(self, name, value, attrs=None, renderer=None):\r\n        if isinstance( value, Point ):\r\n            x = value.x\r\n            value.x = value.y\r\n            value.y = x\r\n        return super( FixedGoogleMultiPointFieldWidget, self ).render( name, value, attrs, renderer )\r\n\r\n\r\n@admin.register( Location )\r\nclass LocationAdmin( admin.ModelAdmin ):\r\n    list_display = ('SurveyID', 'Survey', 'location')\r\n    readonly_fields = ('location',)\r\n    formfield_overrides = {\r\n        models.PointField: {\"widget\": FixedGooglePointFieldWidget(attrs=LEAFLET_WIDGET_ATTRS)},\r\n        models.MultiPointField: {\"widget\": FixedGoogleMultiPointFieldWidget}\r\n    }\r\n\r\n    def save_model(self, request, obj, form, change):\r\n        if obj.location is not None:\r\n            x = obj.location.y\r\n            obj.location.y = obj.location.x\r\n            obj.location.x = x\r\n        elif obj.locations is not None:\r\n            pass\r\n        super( LocationAdmin, self ).save_model( request, obj, form, change )\r\n\r\n    def get_readonly_fields(self, request, obj=None):\r\n        if obj:  # editing an existing object\r\n            return ('locations',)\r\n        return self.readonly_fields\r\n\r\n    def response_add(self, request, obj, post_url_continue=\"../%s/\"):\r\n        if '_addanother' in request.POST:\r\n            return HttpResponseRedirect( f'/admin/bokehMap/location/add?SurveyID={obj.SurveyID}' )\r\n        else:\r\n            return HttpResponseRedirect( '/admin/bokehMap/location' )\r\n\r\n\r\n@admin.register( Time )\r\nclass TimeAdmin( admin.ModelAdmin ):\r\n    list_display = ('SurveyID', 'TStart', 'TEnd', 'TEnd')\r\n    formfield_overrides = {\r\n        models.TimeField: {'widget': SelectTimeWidget.SelectTimeWidget( minute_step=10, use_seconds=False )}, }\r\n\r\n    def response_add(self, request, obj, post_url_continue=\"../%s/\"):\r\n        if '_continue' in request.POST:\r\n            return HttpResponseRedirect( f'/admin/bokehMap/location/add?SurveyID={obj.SurveyID}' )\r\n        elif '_addanother' in request.POST:\r\n            return HttpResponseRedirect( f'/admin/bokehMap/time/add?SurveyID={obj.SurveyID}' )\r\n        else:\r\n            return HttpResponseRedirect( '/admin/bokehMap/location' )\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web_interface/surveydb/bokehMap/admin.py	(revision 96589884523ce3cb8a02b91b27f7055e11a75a16)
+++ web_interface/surveydb/bokehMap/admin.py	(date 1589201980848)
@@ -14,36 +14,35 @@
 from django.contrib.admin.widgets import AdminTimeWidget
 from django.contrib.gis.db import models
 from django.contrib.gis import forms
-from . import SelectTimeWidget
+from .import SelectTimeWidget
 from django.forms import Textarea
 import os
 
-
-@admin.register( Survey )
-class SurveyAdmin( admin.ModelAdmin ):
+@admin.register(Survey)
+class SurveyAdmin(admin.ModelAdmin):
     list_display = [x.name for x in Survey._meta.fields]
     ordering = ('SurveyID',)
     formfield_overrides = {
         models.TextField: {'widget': Textarea(
             attrs={'rows': 1,
                    'cols': 40,
-                   'style': 'height: 8em;'} )},
+                   'style': 'height: 8em;'})},
     }
-
-    # redirect(r'/admin/bokehMap/survey/add/')
+    #redirect(r'/admin/bokehMap/survey/add/')
     def response_add(self, request, obj, post_url_continue="../%s/"):
         if '_continue' in request.POST:
-            return HttpResponseRedirect( f'/admin/bokehMap/time/add?SurveyID={obj.pk}' )
+            return HttpResponseRedirect(f'/admin/bokehMap/time/add?SurveyID={obj.pk}')
         else:
-            return HttpResponseRedirect( '/admin/bokehMap/survey/add' )
+            return  HttpResponseRedirect('/admin/bokehMap/survey/add')
 
-
 LEAFLET_WIDGET_ATTRS = {
     'map_height': '500px',
     'map_width': '100%',
+    'display_raw': 'true',
+    'map_srid': 4326,
 }
 
-LEAFLET_FIELD_OPTIONS = {'widget': LeafletWidget( attrs=LEAFLET_WIDGET_ATTRS )}
+LEAFLET_FIELD_OPTIONS = {'widget': LeafletWidget(attrs=LEAFLET_WIDGET_ATTRS)}
 
 FORMFIELD_OVERRIDES = {
     models.PointField: LEAFLET_FIELD_OPTIONS,
@@ -54,104 +53,62 @@
     models.MultiPolygonField: LEAFLET_FIELD_OPTIONS,
 }
 
-
-class FixedGooglePointFieldWidget( GooglePointFieldWidget ):
+class FixedGooglePointFieldWidget(GooglePointFieldWidget):
+
     def render(self, name, value, attrs=None, renderer=None):
-        if isinstance( value, Point ):
+        if isinstance(value,  Point):
             x = value.x
             value.x = value.y
             value.y = x
-        return super( FixedGooglePointFieldWidget, self ).render( name, value, attrs, renderer )
+        return super(FixedGooglePointFieldWidget, self).render(name, value, attrs, renderer)
 
-
-from mapwidgets.settings import MapWidgetSettings, mw_settings
-
-
-def minify_if_not_debug(asset):
-    """
-        Transform template string `asset` by inserting '.min' if DEBUG=False
-    """
-    return asset.format( "" if not mw_settings.MINIFED else ".min" )
-
-
-class FixedGoogleMultiPointFieldWidget( GooglePointFieldWidget ):
-
-    @property
-    def media(self):
-        css = {
-            "all": [
-                minify_if_not_debug( "mapwidgets/css/map_widgets{}.css" ),
-            ]
-        }
-
-        js = [
-            "https://maps.googleapis.com/maps/api/js?libraries=places&language={}&key={}".format(
-                mw_settings.LANGUAGE, mw_settings.GOOGLE_MAP_API_KEY
-            )
-        ]
-
-        if not mw_settings.MINIFED:  # pragma: no cover
-            js = js + [
-                "mapwidgets/js/jquery_init.js",
-                "mapwidgets/js/jquery_class.js",
-                "mapwidgets/js/django_mw_base.js",
-                "js/mw_google_multipoint_field.js",
-            ]
-        else:
-            js = js + [
-                "mapwidgets/js/mw_google_point_field.min.js"
-            ]
-
-        return forms.Media( js=js, css=css )
-
-    def render(self, name, value, attrs=None, renderer=None):
-        if isinstance( value, Point ):
-            x = value.x
-            value.x = value.y
-            value.y = x
-        return super( FixedGoogleMultiPointFieldWidget, self ).render( name, value, attrs, renderer )
-
+class OverrideOSM(OSMWidget):
+    map_srid = 4326
 
-@admin.register( Location )
-class LocationAdmin( admin.ModelAdmin ):
-    list_display = ('SurveyID', 'Survey', 'location')
+@admin.register(Location)
+class LocationAdmin(admin.ModelAdmin):
+    list_display = ('SurveyID','Survey','location')
     readonly_fields = ('location',)
     formfield_overrides = {
-        models.PointField: {"widget": FixedGooglePointFieldWidget(attrs=LEAFLET_WIDGET_ATTRS)},
-        models.MultiPointField: {"widget": FixedGoogleMultiPointFieldWidget}
+        models.PointField: {"widget": GooglePointFieldWidget},
+        models.MultiPointField: {"widget": OverrideOSM(attrs={'map_width': 1920, 'map_height': 500, 'display_raw':True, 'map_srid':4326,
+                                                            'default_lat':22.31, 'default_lon':114.18, 'default_zoom':12})}
     }
+    default_lat = 2550029
+    default_lon = 12709519
+    default_zoom = 12
+    map_width = 1280
+    map_height = 400
 
     def save_model(self, request, obj, form, change):
-        if obj.location is not None:
-            x = obj.location.y
-            obj.location.y = obj.location.x
-            obj.location.x = x
-        elif obj.locations is not None:
-            pass
+        if obj.locations.geom_type == 'Point':
+            x=obj.location.y
+            obj.location.y=obj.location.x
+            obj.location.x=x
         super( LocationAdmin, self ).save_model( request, obj, form, change )
 
     def get_readonly_fields(self, request, obj=None):
-        if obj:  # editing an existing object
+        if obj: # editing an existing object
             return ('locations',)
         return self.readonly_fields
 
     def response_add(self, request, obj, post_url_continue="../%s/"):
         if '_addanother' in request.POST:
-            return HttpResponseRedirect( f'/admin/bokehMap/location/add?SurveyID={obj.SurveyID}' )
+            return HttpResponseRedirect(f'/admin/bokehMap/location/add?SurveyID={obj.SurveyID}')
         else:
-            return HttpResponseRedirect( '/admin/bokehMap/location' )
+            return HttpResponseRedirect('/admin/bokehMap/location')
 
 
-@admin.register( Time )
-class TimeAdmin( admin.ModelAdmin ):
+
+@admin.register(Time)
+class TimeAdmin(admin.ModelAdmin):
     list_display = ('SurveyID', 'TStart', 'TEnd', 'TEnd')
     formfield_overrides = {
-        models.TimeField: {'widget': SelectTimeWidget.SelectTimeWidget( minute_step=10, use_seconds=False )}, }
-
+        models.TimeField: {'widget': SelectTimeWidget.SelectTimeWidget(minute_step=10, use_seconds=False)},}
     def response_add(self, request, obj, post_url_continue="../%s/"):
         if '_continue' in request.POST:
-            return HttpResponseRedirect( f'/admin/bokehMap/location/add?SurveyID={obj.SurveyID}' )
+            return HttpResponseRedirect(f'/admin/bokehMap/location/add?SurveyID={obj.SurveyID}')
         elif '_addanother' in request.POST:
-            return HttpResponseRedirect( f'/admin/bokehMap/time/add?SurveyID={obj.SurveyID}' )
+            return HttpResponseRedirect(f'/admin/bokehMap/time/add?SurveyID={obj.SurveyID}')
         else:
-            return HttpResponseRedirect( '/admin/bokehMap/location' )
+            return HttpResponseRedirect( '/admin/bokehMap/location' )
\ No newline at end of file
Index: web_interface/surveydb/bokehMap/static/js/mw_google_multipoint_field.js
===================================================================
--- web_interface/surveydb/bokehMap/static/js/mw_google_multipoint_field.js	(revision 96589884523ce3cb8a02b91b27f7055e11a75a16)
+++ web_interface/surveydb/bokehMap/static/js/mw_google_multipoint_field.js	(revision 96589884523ce3cb8a02b91b27f7055e11a75a16)
@@ -1,164 +0,0 @@
-(function($) {
-	var markers = [];
-	
-    DjangoGooglePointFieldWidget = DjangoMapWidgetBase.extend({
-		
-		
-        initializeMap: function(){
-            var mapCenter = this.mapCenterLocation;
-            if (this.mapCenterLocationName){
-                
-                this.geocoder.geocode({'address' : this.mapCenterLocationName}, function(results, status) {
-                    if (status === google.maps.GeocoderStatus.OK) {
-                        var geo_location = results[0].geometry.location;
-                        mapCenter = [geo_location.lat(), geo_location.lng()];
-                    }else{
-                        console.warn("Cannot find " + this.mapCenterLocationName + " on google geo service.")
-                    }
-                    this.map = new google.maps.Map(this.mapElement, {
-                        center: new google.maps.LatLng(mapCenter[0], mapCenter[1]),
-                        scrollwheel: true,
-						gestureHandling: 'greedy',
-                        zoomControlOptions: {
-                            position: google.maps.ControlPosition.RIGHT
-                        },
-                        zoom: this.zoom
-                    });
-
-                    $(this.mapElement).data('google_map', this.map);
-                    $(this.mapElement).data('google_map_widget', this);
-
-                    if (!$.isEmptyObject(this.locationFieldValue)){
-                        this.updateLocationInput(this.locationFieldValue.lat, this.locationFieldValue.lng);
-                        this.fitBoundMarker();
-                    }
-
-                }.bind(this));
-
-            }else{
-                this.map = new google.maps.Map(this.mapElement, {
-                    center: new google.maps.LatLng(mapCenter[0], mapCenter[1]),
-                    scrollwheel: true,
-					gestureHandling: 'greedy',
-					zoomControlOptions: {
-                        position: google.maps.ControlPosition.RIGHT
-                    },
-                    zoom: this.zoom
-                });
-                
-                $(this.mapElement).data('google_map', this.map);
-                $(this.mapElement).data('google_map_widget', this);
-
-                if (!$.isEmptyObject(this.locationFieldValue)){
-                    this.updateLocationInput(this.locationFieldValue.lat, this.locationFieldValue.lng);
-                    this.fitBoundMarker();
-                }
-            }
-
-        },
-
-        addMarkerToMap: function(lat, lng){
-            var marker_position = {lat: parseFloat(lat), lng: parseFloat(lng)};
-            this.marker = new google.maps.Marker({
-                position: marker_position,
-                map: this.map,
-                draggable: true
-            });
-			this.marker.addListener("dragstart", this.dragMarkerSt.bind(this));
-            this.marker.addListener("dragend", this.dragMarkerEd.bind(this));
-			markers.push(this.marker);
-        },
-
-        fitBoundMarker: function () {
-            var bounds = new google.maps.LatLngBounds();
-            bounds.extend(this.marker.getPosition());
-            this.map.fitBounds(bounds);
-            if (this.markerFitZoom && this.isInt(this.markerFitZoom)){
-                var markerFitZoom = parseInt(this.markerFitZoom);
-                var listener = google.maps.event.addListener(this.map, "idle", function() {
-                    if (this.getZoom() > markerFitZoom) {
-                        this.setZoom(markerFitZoom)
-                    }
-                    google.maps.event.removeListener(listener);
-                });
-            }
-        },
-		
-		updateLocationInput: function(lat, lng, place){
-			var location_input_val = "MULTIPOINT (" + lat + " " + lng + ")";
-			var legacy_location = this.locationInput.val();
-			
-			this.locationInput.val(function(){
-				if ((legacy_location=="")){
-					return location_input_val;
-					}
-				else{
-					return legacy_location.replace(")","") + ", " + lat + " " + lng + ")";
-				}
-				}
-			
-			);
-			this.updateCoordinatesInputs(lat, lng);
-			this.addMarkerToMap(lat, lng);
-			if ($.isEmptyObject(this.locationFieldValue)){
-				$(document).trigger(this.markerCreateTriggerNameSpace,
-					[place, lat, lng, this.wrapElemSelector, this.locationInput]
-				);
-			}else{
-				$(document).trigger(this.markerChangeTriggerNameSpace,
-					[place, lat, lng, this.wrapElemSelector, this.locationInput]
-				);
-			}
-			
-			this.callPlaceTriggerHandler(lat, lng, place);
-			this.locationFieldValue = {
-				"lng": lng,
-				"lat": lat
-			};
-			this.deleteBtn.removeClass("mw-btn-default disabled").addClass("mw-btn-danger");
-		},
-
-        removeMarker: function(e){
-			if (markers){
-				for (var i = 0; i < markers.length; i++) {
-				  markers[i].setMap(null);
-				}
-			}
-            
-        },
-		
-		//remove original marker location from the locationInput String
-		dragMarkerSt: function(e){
-            var legacy_location = this.locationInput.val();
-			var lat = e.latLng.lat();
-			var lng = e.latLng.lng();
-			this.locationInput.val(function(){
-				legacy_location.replace(", " + lat + " " + lng , "");
-				legacy_location.replace(lat + " " + lng , "");
-				return legacy_location;
-					}
-			);
-
-        },
-
-        dragMarkerEd: function(e){
-            this.updateLocationInput(e.latLng.lat(), e.latLng.lng())
-        },
-
-        handleAddMarkerBtnClick: function(e){
-            $(this.mapElement).toggleClass("click");
-            this.addMarkerBtn.toggleClass("active");
-            if ($(this.addMarkerBtn).hasClass("active")){
-                this.map.addListener("click", this.handleMapClick.bind(this));
-            }else{
-                google.maps.event.clearListeners(this.map, 'click');
-            }
-        },
-
-        handleMapClick: function(e){
-            this.updateLocationInput(e.latLng.lat(), e.latLng.lng())
-			e.stop();
-        }
-    });
-
-})(mapWidgets.jQuery);
